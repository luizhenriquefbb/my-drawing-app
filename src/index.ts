import { app, BrowserWindow, globalShortcut, ipcMain } from "electron";
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    width: 800,
    height: 600,
    transparent: true,
    opacity: 1, // Optional opacity, default 1.0
    frame: false,
    alwaysOnTop: true, // Always on top
    hasShadow: false,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      contextIsolation: true,
      nodeIntegration: false,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  mainWindow.maximize();

  // Make window click-through unless Command is held
  let isCmdDown = false;

  // Helper to update mouse event handling
  function updateIgnoreMouseEvents() {
    mainWindow.setIgnoreMouseEvents(!isCmdDown, { forward: true });
  }

  // Listen for Command key events globally
  app.on('browser-window-focus', () => {
    // Listen for keydown/keyup in renderer
    mainWindow.webContents.send('request-cmd-listener');
  });

  // Listen for IPC from renderer
  ipcMain.on('cmd-key-state', (_event: Electron.IpcMainEvent, down: boolean) => {
    isCmdDown = down;
    updateIgnoreMouseEvents();
  });

  // Initial state
  updateIgnoreMouseEvents();

  // Open the DevTools.
  // mainWindow.webContents.openDevTools(); // Comment out for production

  globalShortcut.register("F12", () => {
    if (mainWindow) {
      if (mainWindow.webContents.isDevToolsOpened()) {
        mainWindow.webContents.closeDevTools();
      } else {
        mainWindow.webContents.openDevTools({ mode: "detach" });
      }
    }
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
